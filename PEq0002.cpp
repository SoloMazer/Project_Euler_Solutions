//
// Created by StellarTerror
//
// Problem:
// Each term in the fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be: 1,2,3,5,8,13,21,34,55,89,...\
// By considering the terms in the fibonacci sequence whose values do not exceed four million, find the sum of the even valued terms.
//
// Algorithm:
// After initializing the first two terms we can calculate the third using the fact that it is the sum of previous two.
// This is done using the variables t1, t2, and t3.
// We use a while loop to do this addition until the third term is reaches our maximum limit.
// An if loop checks for third terms divisible by 2 and stores their summation in the sum variable.
// Finally, we cout the sum to get our desired result.

//in case of n=50 its going till 55. fix that issue.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#include <iostream>

int main(){

    //defining the maximum limit of fibonacci
    unsigned long long n{};
    std::cin >> n;

    //variables for terms of fibonacci
    unsigned long long t1{};
    unsigned long long t2{1};
    unsigned long long t3{};

    //Variable to store the sum of even terms
    unsigned long long sum{};

    while (t3 < n){

        //Defining third term as it is in fibonacci sequence
        t3 = t1 + t2;
        std::cout << t3 << std::endl;

        //checking the even third terms
        if (t3 % 2 == 0){
            sum = sum + t3;
        }

        //conditions to update the loop for next third term
        t1 = t2;
        t2 = t3;

    }
    std::cout << "sum = " << sum << std::endl;
    return 0;
}




